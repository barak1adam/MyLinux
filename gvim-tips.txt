spaGGVIM tips:
---------

run cscope in the root dir: cscope -Rbk

open included file (on cursor) in a new tab: CTRL+W, gf
(gf - go to file)

open a file in the same buffer: :e <file>

show open files in the same buffer: ,+ 0

cscope:
-------
go to definition: CTRL + ]
go back: CTRL + T

[[ - jump to start of current function


move between open tabs:
CTRL + pgDown, CTRL + pgUp

F9 - outline functions, variables
F9 - close

show line numbers:
:set nu

i - insert before the cursor position
a - insert after the current postion
A - insert at the end of the line


e - go to the end of the line
0 - go to the begining of the line.

CTRL + ] jump to tag
CTRL + T, CTRL + O pop last tag


copy and paste:
--------------
esc + y + $ - cp to the end of the line
esc + p - paste it

esc + y + w - cp to the end of the word
esc + p - paste it

select then copy and paste:
----------------------------
esc+v
e - select to the end of words
$ - to the end of line
h,j,k,l - select with arrows

then y

then p 

p PASTE AFTER THE CURSOR !


viw - select word under the cursor (copy to default register "")
yiw - select word under the cursor and copy it (copy to default register "" and to "0 register)

use xnoremap p "_dP to make "p" always paste what in "0, e.g what was originally yanked.


yiw - copy current word
viwp - select other word under the cursor and paste what was yanked. will paste it again till something else is yanked.


copy out of GVIM:
----------------
viw - select word
V - select a line withouy the ending newline char
ve - select till the end of word
vw - select till the next word
v$ - select to end of line

then paste with mouse middle button



normal mode:
-------------
"+yiw - copy current word to clipboard
"5p - paste what in register 5
"0p - paste what in register 0, e.g what was just yanked
"*p - paste what in register *, e.g what was last selected


insert mode:
------------
you get " by typing CTRL+r

"5 - paste what in register 5
"0 - paste what in register 0, e.g what was just yanked
"* - paste what in register *, e.g what was last selected

visual mode:
------------
viw "+y - select current word, then copy what is selected to clipboard

better to use the mouse here...

select all
==========
gg v G y

:%y+



mappings:
--------

:unmap ,tn
:map tn :tabnew <C-R>* <CR> //open in a new tab what is selected by the mouse
:map c :close <CR> //close tab
:Bclose - close buffer
,bd - close buffer


:tabnew . //open folder view
mouse click on file to open it
select the file name by "V", then press "tn"
CTRL-O - back to prev buffer



movement:
--------------------------------------------------
e - move cursor to end of word
w - move cursor to start of the next word
0 - start of line
$ - end of line
G - moves to the end of the file.
gg - start of file
number  G  moves to that line number
j$ - end of the next line

gvim back and forward:
---------------------
CTRL+o back
CTRL+i forward

--------------------------------------------------

insert:
--------------------------------------------------
i - insert before the cursor
a - insert after the cursor
A - insert at the end of the line
o - open a new line after the current line (line of cursor)
O - open a new line before (UPPER) the current line (line of cursor)
----------------------------------------------------


indent:
---------
ESC+V
select lines
> to indent selected lines
< to de-indent

>G     Indent until end of file
>}     Indent until next paragraph
>iB    Indent contents of current { } block

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 1 SUMMARY


  1. The cursor is moved using either the arrow keys or the hjkl keys.
         h (left)       j (down)       k (up)       l (right)

  2. To start Vim from the shell prompt type:  vim FILENAME <ENTER>

  3. To exit Vim type:     <ESC>   :q!   <ENTER>  to trash all changes.
             OR type:      <ESC>   :wq   <ENTER>  to save the changes.
			 wa, wall, wa! - save all changes
             ZZ - commit changes and exit the file.
             :e! - reload

  4. To delete the character at the cursor type:  x

  5. To insert or append text type:
         i   type inserted text   <ESC>         insert before the cursor
         A   type appended text   <ESC>         append after the line

NOTE: Pressing <ESC> will place you in Normal mode or will cancel
      an unwanted and partially completed command.

Now continue with Lesson 2.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


count/number is always before the command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 2 SUMMARY


  1. To delete from the cursor up to the next word type:    dw
  2. To delete from the cursor to the end of a line type:    d$
  3. To delete a whole line type:    dd
  
  to join 2 lines, type J

  4. To repeat a motion prepend it with a number:   2w
  5. The format for a change command is:
               operator   [number]   motion
     where:
       operator - is what to do, such as  d  for delete
       [number] - is an optional count to repeat the motion
       motion   - moves over the text to operate on, such as  w (word),
                  $ (to the end of line), etc.

  6. To move to the start of the line use a zero:  0

  7. To undo previous actions, type:           u  (lowercase u)
     To undo all the changes on a line, type:  U  (capital U)
     To undo the undo's, type:                 CTRL-R
     
     undo /redo - refers to commands. e.g typing 10 letters then ESC, considered one command.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 3 SUMMARY


  1. To put back text that has just been deleted, type   p .  This puts the
     deleted text AFTER the cursor (if a line was deleted it will go on the
     line below the cursor).

  2. To replace the character under the cursor, type   r   and then the
     character you want to have there.

  3. The change operator allows you to change from the cursor to where the
     motion takes you.  eg. Type  ce  to change from the cursor to the end of
     the word,  c$  to change to the end of a line.

  4. The format for change is:

         c   [number]   motion

Now go on to the next lesson.



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 4 SUMMARY


  1. CTRL-G  displays your location in the file and the file status.
             G  moves to the end of the file.
     number  G  moves to that line number.
            gg  moves to the first line.

  2. Typing  /  followed by a phrase searches FORWARD for the phrase.
     Typing  ?  followed by a phrase searches BACKWARD for the phrase.
     After a search type  n  to find the next occurrence in the same direction
     or  N  to search in the opposite direction.
     CTRL-O takes you back to older positions, CTRL-I to newer positions.

  3. Typing  %  while the cursor is on a (,),[,],{, or } goes to its match.

  4. To substitute new for the first old in a line type    :s/old/new
     To substitute new for all 'old's on a line type       :s/old/new/g
     To substitute phrases between two line #'s type       :#,#s/old/new/g
     To substitute all occurrences in the file type        :%s/old/new/g
     To ask for confirmation each time add 'c'             :%s/old/new/gc

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 5 SUMMARY


  1.  :!command  executes an external command.

      Some useful examples are:
         (MS-DOS)         (Unix)
          :!dir            :!ls            -  shows a directory listing.
          :!del FILENAME   :!rm FILENAME   -  removes file FILENAME.

  2.  :w FILENAME  writes the current Vim file to disk with name FILENAME.

  3.  v  motion  :w FILENAME  saves the Visually selected lines in file
      FILENAME.

  4.  :r FILENAME  retrieves disk file FILENAME and puts it below the
      cursor position.

  5.  :r !dir  reads the output of the dir command and puts it below the
      cursor position.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 6 SUMMARY

  1. Type  o  to open a line BELOW the cursor and start Insert mode.
     Type  O  to open a line ABOVE the cursor.

  2. Type  a  to insert text AFTER the cursor.
     Type  A  to insert text after the end of the line.

  3. The  e  command moves to the end of a word.

  4. The  y  operator yanks (copies) text,  p  puts (pastes) it.

  5. Typing a capital  R  enters Replace mode until  <ESC>  is pressed.

  6. Typing ":set xxx" sets the option "xxx".  Some options are:
        'ic' 'ignorecase'       ignore upper/lower case when searching
        'is' 'incsearch'        show partial matches for a search phrase
        'hls' 'hlsearch'        highlight all matching phrases
     You can either use the long or the short option name.

  7. Prepend "no" to switch an option off:   :set noic

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               Lesson 7 SUMMARY


  1. Type  :help  or press <F1> or <Help>  to open a help window.

  2. Type  :help cmd  to find help on  cmd .

  3. Type  CTRL-W CTRL-W  to jump to another window

  4. Type  :q  to close the help window

  5. Create a vimrc startup script to keep your preferred settings.

  6. When typing a  :  command, press CTRL-D to see possible completions.
     Press <TAB> to use one completion.







~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



cscope:
-------
-------

#cscope
cscope -Rbk

grep:
caller: CTRL + \ + c
symbol: CTRL + \ + s
global def: CTRL + \ + g


cs find t mvBoardIdGet
cs find s mvBoardIdGet
cs find g mvBoardIdGet





vertical editing:
-----------------

ESC CTRL+V to enter visual block mode

select text vertically

x - to cut

SHIFT + i to insert

type char/text to insert

ESC

after the ESC all new text will be typed in vertically !!!!!!!1



save session:
:mksession ~/mysession.vim


restore session:
vim -S ~/mysession.vim
vim + :source ~/mysession.vim


splitting windows:
==================

While running vim:

:sp filename for a horizontal split
:vsp filename or :vs filename for a vertical split

Ctrl+W, Q to close one

Ctrl+W, Ctrl+W to switch between windows

Ctrl+W, J (xor K, H, L) to switch to adjacent window (intuitively up, down, left, right)



move to shell to ls for files:
=============================
:sh
exit - to quit shell


files and folders:
==================

ls current dir:
:e . 


buffers:
========

new file-name
new //without any file name, a new file is openend

:ls
for list of open buffers

:bp previous buffer
:bn next buffer
:bn (n a number) move to n'th buffer
:b <filename-part> with tab-key providing auto-completion (awesome !!)

colors for vimdiff:
==================
:color molok
:colordefault
:color desert
:color pyte //recommended
:color peaksea //recommended

]c - next diff
[c - prev diff
do (diff obtain) - take diff to my current file
dp (diff put) - put diff from my current file to the diff file
CTRL+W w - moving cursor to the other file
zo          - open folded text
zc          - close folded text
:diffupdate - re-scan the files for differences

If you load up two files in splits (:vs or :sp), you can do
:diffthis on each window and achieve a diff of files that were already loaded in buffers
:diffoff can be used to turn off the diff mode. 



