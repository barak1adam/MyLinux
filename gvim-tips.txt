GVIM tips:
++++++++++

pipe output into vim:
====================
ls -la | vim -
ls -la | gvim -

navigation and editing:
======================

editing:
--------
i - insert before the cursor
a - insert after the cursor
A - insert at the end of the line
o - open a new line after the current line (line of cursor)
O - open a new line before (UPPER) the current line (line of cursor)

add a new line down the current line, change to insert mode and locate the cursor exactly down the start of the current line:
ESC + o
same, but above the current line:
ESC+SHIFT+o

vertical editing:
-----------------

ESC CTRL+V to enter visual block mode

select text vertically

x - to cut

SHIFT + i to insert

type char/text to insert

ESC

after the ESC all new text will be typed in vertically !!!!!!!1


how to go back to my last editing position ?
--------------------------------------------
1) u + CTRL+R (undo + redo)
2) `.

movement:
--------
e - move cursor to end of word
w - move cursor to start of the next word
b - same like "w", but backwords
0 - start of line
$ - end of line
G - moves to the end of the file.
gg - start of file
number  G  moves to that line number
j$ - end of the next line
^ - move to the begining of the text in a line, not to 0.

H: Move cursor to the top of the currently visible page (think "high")

M: Move cursor to the middle of the currently visible page

L: Move cursor to the bottom of the currently visible page (think "low")

CTRL-D: Page down

CTRL-U: Page up

[[ - jump to start of current function

CTRL+o back
CTRL+i forward

marking:
--------
m: Typing "m" followed by a letter creates a mark reference by that letter.
	Lower-case letters are specific to the current document, while upper-case letters can only be used once (they can be used to jump to sections in different documents.

': The single quote followed by a mark letter (previously defined with the "m" as above), will move the cursor to the beginning of the line containing that mark.

`: The back-tick followed by a mark letter will move the cursor to the exact position of the mark.


indent:
---------
ESC+V
select lines
> to indent selected lines
< to de-indent

x> where x is the number of times to indent right
x< where x is the number of times to indent left

>G     Indent until end of file
>}     Indent until next paragraph
>iB    Indent contents of current { } block

set tab to 2 spaces:
:set tabstop=2


copy and paste:
===============


esc + y + $ - cp to the end of the line
esc + p - paste it

esc + y + w - cp to the end of the word
esc + p - paste it

select then copy and paste:
----------------------------
select:

esc+v
e - select to the end of words
$ - to the end of line
h,j,k,l - select with arrows

copy:

then y

paste:

then p 

p PASTE AFTER THE CURSOR !
P paste before the cursor !

registers and tips:
-------------------

" - register prefix
0 - register holds what was just yanked 
* - register holds what was just selected
+ - register holds what's in clipboard

viw - select word under the cursor (copy to default register "")
V - select a line withouy the ending newline char
ve - select till the end of word
vw - select till the next word
v$ - select to end of line
gg v G - select all

yiw - select word under the cursor and copy it (copy to default register "" and to "0 register)

yiw - copy current word
viwp - select other word under the cursor and paste what was yanked. 
will paste it again till something else is yanked.

copy out of GVIM:
----------------

select all: gg v G
copy to cipboard: "+y
cut to clipboard: "+x
paste from clipboard: "+gP


normal mode:
-------------
"+yiw - copy current word to clipboard
"5p - paste what in register 5
"0p - paste what in register 0, e.g what was just yanked
"*p - paste what in register *, e.g what was last selected
"*p - paste what in register *, e.g what was last selected


insert mode:
------------
you get " by typing CTRL+r

"5 - paste what in register 5
"0 - paste what in register 0, e.g what was just yanked
"* - paste what in register *, e.g what was last selected

visual mode:
------------
viw "+y - select current word, then copy what is selected to clipboard

better to use the mouse here...


files:
======

open included file (on cursor) in a new tab: CTRL+W, gf
(gf - go to file)

open a file in the same buffer: :e <file>

show open files in the same buffer: ,+ 0

ls current dir:
:e . 


windows:
========

move between open tabs:
CTRL + pgDown, CTRL + pgUp

move to last active tab: CTRL+L (c-l)
(I've added a mapping)

splitting windows:
------------------

While running vim:

:sp filename for a horizontal split
:vsp filename or :vs filename for a vertical split
:vsplit file

Ctrl+W, Q to close one

Ctrl+W, Ctrl+W to switch between windows

Ctrl+W, J (xor K, H, L) to switch to adjacent window (intuitively up, down, left, right)


buffers:
========

new file-name
new //without any file name, a new file is openend

:ls
for list of open buffers

:e edit a new buffer in the current tab
:e <file>: Edit another file in a new buffer in the curent tab and switch to it
:q - quit the current tab.
:bp previous buffer
:bn next buffer
:bn (n a number) move to n'th buffer
:bfirst
:blast
:bdelete delete the current buffer
:b <filename-part> with tab-key providing auto-completion (awesome !!)

cscope:
=======

1. create cscope.out in the root dir:
------------------------------------
cscope -Rbk

	#or make it like Alex:
	echo 1
	find . -name "*.[ch]" > cscope.files
	find . -name "*.def" >> cscope.files
	#find . -follow -name "*.[ch]" > cscope.files
	echo 2
	cscope -b
	echo 3

2. to add/update cscope db:
--------------------------
:cs reset (to update current db with new code added)
:cs add cscpe.out (add cscope to gvim)

3. navigation:
--------------
go to definition: CTRL + ]
go back: CTRL + T, CTRL + O
[[ - jump to start of current function

4. grep:
--------
caller: CTRL + \ + c
symbol: CTRL + \ + s
global def: CTRL + \ + g

find : Query for a pattern (Usage: find c|d|e|f|g|i|s|t name)
       c: Find functions calling this function
       d: Find functions called by this function
       e: Find this egrep pattern
       f: Find this file
       g: Find this definition
       i: Find files #including this file
       s: Find this C symbol
       t: Find this text string

cs find t mvBoardIdGet
cs find s mvBoardIdGet
cs find g mvBoardIdGet


Session:
========
save session:
:mksession ~/mysession.vim

restore session:
vim -S ~/mysession.vim
vim + :source ~/mysession.vim


move to Linux shell to ls for files:
===================================
:sh
exit - to quit shell

to get GVIM settings:
=====================
:set tabstop ------> if you don't write a value, it prints out the current value.


find & replace words in a file:
===============================
The :substitute command searches for a text pattern, and replaces it with a text string. 
There are many options, but these are what you probably want:

:%s/foo/bar/g
Find each occurrence of 'foo' (in all lines), and replace it with 'bar'.
% = all file

:s/foo/bar/g
Find each occurrence of 'foo' (in the current line only), and replace it with 'bar'.

to fine and replace in selected section, first select, then use
:'<,'>s/foo/bar/g

g - is used to replace all occurnaces in a line, section, file,...
without 'g', only the first occurance will be replaced.

:%s/foo/bar/gc
Change each 'foo' to 'bar', but ask for confirmation first.

:%s/\<foo\>/bar/gc
Change only whole words exactly matching 'foo' to 'bar'; ask for confirmation.

:%s/foo/bar/gci
Change each 'foo' (case insensitive due to the i flag) to 'bar'; ask for confirmation.

:%s/foo\c/bar/gc is the same because \c makes the search case insensitive.
This may be wanted after using :set noignorecase to make searches case sensitive (the default).

:%s/foo/bar/gcI
Change each 'foo' (case sensitive due to the I flag) to 'bar'; ask for confirmation.

:%s/foo\C/bar/gc is the same because \C makes the search case sensitive.
This may be wanted after using :set ignorecase to make searches case insensitive.

Replace in multiple files:
==========================
grep -rli 'stdio.h' * | xargs sed -i 's/stdio.h/STDIO.H/g'
r = recursiv
l = list file names only
i = ignore case

to get rid of highlights:
========================
:noh

remove unwanted spaces to a block of code:
=========================================
for example, first make the desired settings:
set expandtab
set shifttab=2
set tabstop=2
then, select the code and press '='

%s/\s\+$//e

get rid of trailing ^M:
======================

%s/\r/\r/g

replace a word in block:
========================
select the code (v) then press :
then use:
s/foo/bar/gc


Installing vim on fresh PC
==========================
1) sudo apt install vim...gvim...
2) clone, compile and install 'ag' (grepper)
3) copy '.vim' and '.vimrc' to ~.

DIFF:
=====

to diff directories:
DifDiff orig_dir new_dir

to diff files from commandline:
gvimdiff file1 file2

colors for vimdiff:
==================
:color molok
:colordefault
:color desert
:color pyte //recommended
:color peaksea //recommended

]c - next diff
[c - prev diff
do (diff obtain) - take diff to my current file
dp (diff put) - put diff from my current file to the diff file
CTRL+W w - moving cursor to the other file
zo - open folded text
zc - close folded text
zM - expand all sections
zR - fold all sections
:diffupdate - re-scan the files for differences

If you load up two files in splits (:vs or :sp), you can do
:diffthis on each window and achieve a diff of files that were already loaded in buffers
:diffoff can be used to turn off the diff mode. 

vimrc and gvimrc
==================
The gvimrc file is where GUI-specific startup commands should be placed. 
It is always sourced after the vimrc file.
You can use the gvimrc files to set up your own customized menus (see :menu)
and initialize other things that you may want to set up differently 
from the terminal version.

usually use vimrc !

My mappings and tips
====================

F9 - outline functions, variables
F9 - close

show line numbers:
:set nu

:unmap ,tn
:map tn :tabnew <C-R>* <CR> //open in a new tab what is selected by the mouse

:map c :close <CR> //close tab

:Bclose - close buffer

,bd - close buffer


:tabnew . //open folder view
mouse click on file to open it
select the file name by "V", then press "tn"
CTRL-O - back to prev buffer

use xnoremap p "_dP: to make "p" always paste what in "0, e.g what was originally yanked.

kosta, new plugins:
===================
:Obsession
gvims

,f - Fuzzy File Search
,b - show open buffers
,a - Grep current word using 'ag' (world's best grepper)

Install new plugin
1) Add line in ~/.vimrc Plugin "postfix of github project path"
2) Reenter vim (source ~/.vimrc)
3) :PluginInstall

Uninstall vim plugin
1) Revome line...
2) ...
3) PluginClean

