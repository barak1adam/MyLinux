#how to run Valgrind:
cd /opt/valgrind/bin
./valgrind --leak-check=yes vtysh
# ./valgrind --leak-check=yes vtysh

cd /opt/valgrind/bin
./valgrind --tool=drd --show-stack-usage=yes vtysh
--tool=exp-sgcheck

#define stack size, gaurd size
http://man7.org/linux/man-pages/man3/pthread_attr_setguardsize.3.html

#compile with stack protection
https://en.wikibooks.org/wiki/Linux_Applications_Debugging_Techniques/Stack_corruption

#check if stack size was changed related to KW

#compile with check stack inside
gcc -c -fstack-check 

#check stack usage with valgrind
valgrind --tool=drd --show-stack-usage=yes PROG

--tool=exp-sgcheck 

getrusage ?

#get base address of stack and print a any variable address inside a function to determine how deep inside...
pthread_attr_getstackaddr 

RLIMIT_STACK The maximum size of the process stack, in bytes. Upon reaching this limit, a SIGSEGV signal is generated. To handle this signal, a process must employ an alternate signal stack (sigaltstack(2)). 
Since Linux 2.6.23, this limit also determines the amount of space used for the process's command-line arguments and environment variables; for details, see execve(2). 



Thursday:
Add prints to current handler to verify that SIGINT and SIGTSTP are not handled
or just try: cat /proc/86579/status
if a signal is not handled nor ignored, should not be marked in SigIgn, SigCgt

can try also strace:
strace -p 11152 -e trace=none -e signal=all
if no signal is printed, it was ignored

try SIGIGN in the process

try to block those signals in the thread level:
http://man7.org/linux/man-pages/man3/pthread_sigmask.3.html

we use NPTL for threads which is POSIX compatible. threads in NPTL are created by pthread_create.

Signal actions are set for the whole process. The behavior of signal(2) is undefined for multi-threaded application, sigaction(2) must be used.
http://www.linuxprogrammingblog.com/all-about-linux-signals?page=11

According to POSIX, the behavior of a process is undefined after it ignores a SIGFPE, SIGILL, or SIGSEGV signal that was not generated by kill(2) or raise(3).



