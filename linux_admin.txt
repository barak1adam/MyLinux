#how to pen a newtwork drive:
smb://172.21.9.4

#redirect to dev/null
> /dev/null 2>&1

# create large file
dd if=/dev/zero of=file.txt count=10000000 bs=1024

#navigate between commands
CTRL + R - to find one of the last commands instead of arrows


FILES:
-------
#show file permissions
stat -c "%a %n" *

explanation:
-----------
Replace * with the relevant directory or the exact filename that you want to examine.

From the man page of stat,

-c  --format=FORMAT
          use  the  specified  FORMAT instead of the default; output a newline after
          each use of FORMAT
%a     Access rights in octal
%n     File name
 
#scp to HAL
barak@ran-pc-linux:~/ng_build_87/versions$ scp NG-master-4.5.1.87d-vrf.ver nbase@194.90.136.1:\image

#how to copy a dir -- no need *
sudo cp -r /opt/valgrind/ dist/arm_msys_root/opt/

#copy source file to dest file (if dest file doesn't exist, it is created)
cp 0001-enable_aufs.patch ../../../install/kernel3.4.69/build/patches/0044-enable_aufs.patch

#copy a file into a folder
cp ../install/kernel3.4.69/build/patches/0044-enable_aufs.patch ~/wkspaces/new_dist/install/kernel3.4.69/build/patches/

#linux show threads of a process
ps -T -p <pid>

ps -aux
s -aux | grep bcompare
sudo kill -9 <PID>

#count files under some folder
ls /ver/*.bundle | wc -l

#show a full path for a file:
============================
ls $PWD/serial.c
readlink -f serial.c

#tar and untar:
#tar:
tar cvzf new.tar.gz ./root ./run ./usr ./var ./sbin ./lib ./etc ./dev ./bin
//c = create a zip file
//x = extract zip


#dmesg
dmesg (Display message or driver message) is a command which will show Kernel ring buffers. These messages contain valuable information about device drivers loaded into the kernel at the time of booting as well as when we connect a hardware to the system on the fly. In other words dmesg will give us details about hardware drivers connected to, disconnected from a machine and any errors when hardware driver is loaded into the kernel. These messages are helpful in diagnosing or debugging hardware and device driver issues. 

dmesg output format
[ time ] device name: message
[ time ] : number seconds from the boot time. If we see something like 34.23445 as time stamp, that indicates this message was created after 34 seconds of booting the machine.

device name: This will give us the hardware device name along with manufacture details.

message: This is actual information we have to look at, this message contain information about devices loaded information, if it's not loaded it will give us error etc.


dmesg | grep -i eth0

dmesg | grep -i usb

dmesg | grep -i Memory

dmesg | grep -i tty

#ping
ping hal
ping www.google.com
ping hal

#ssh
ssh kostaz@172.21.10.144
ssh admin@<ip of target>
ssh ran@172.21.13.26

mount:
------
/etc/fstab

#current dir
pwd

#cscope
cscope -Rbk


log files:
---------
var/log/messages
dmesg

#watch last 300 lines, default is 10 lines
tail -n300 /var/log/messages
=> /var/log/messages : General log messages

=> /var/log/boot : System boot log

=> /var/log/debug : Debugging log messages

=> /var/log/auth.log : User login and authentication logs

=> /var/log/dmesg : Linux kernel ring buffer log

=> /var/log/dpkg.log : All binary package log includes package installation and other information



meld:
----
If you start Meld from the command line, you can tell it what to do when it starts.
For a two- or three-way file comparison, start Meld with meld file1 file2 or meld file1 file2 file3 respectively.
For a two- or three-way directory comparison, start Meld with meld dir1 dir2 or meld dir1 dir2 dir3.


grep:
====

grep by default is case sensitive
format: grep [OPTIONS] PATTERN [FILE...]

examples:

#grep a string in file
grep 'str' file1

#grep a string in multiple files
grep 'str' file1 file2 file3

#grep multiple strings in file
grep 'str1 str2' file1

#use a linux command, then pipe grep
cat file | grep 'word'

#ignore caste
grep -i "barak" /etc/passwd

#grep recursive
grep -r "192.168.1.5" /etc/
grep -R "192.168.1.5" /etc/

#supress file names in each line of the output
grep -h -R "192.168.1.5" /etc/
grep -hR "192.168.1.5" /etc/

#whole word only
grep -w "boo" file

#multiple words search with egrep
egrep -w 'word1|word2' /path/to/file

#count the number of times a word was matched
grep -c 'word' /path/to/file

#show line numbers
grep -n 'root' /etc/passwd

#NOT - grep all line that do NOT match a word
grep -v bar /path/to/file

#show only file names
grep -l 'main' *.c

#use reg expressions
grep "lines.*empty" demo_file

#match only lines start with a string
grep ^vivek /etc/passwd

#match only lines end with a string
grep 'foo$' filename

#reg expressions:
? The preceding item is optional and matched at most once.
* The preceding item will be matched zero or more times.
+ The preceding item will be matched one or more times.
{n} The preceding item is matched exactly n times.
{n,} The preceding item is matched n or more times.
{,m} The preceding item is matched at most m times.
{n,m} The preceding item is matched at least n times, but not more than m times.

#kosta grep: r=recursive, n=show line numbers, H-show file names (default of grep)
grep -rnH mount *

#use grep and sed to edit multiple files
#r = recursiv
#l = list file names only
#i = ignore case
grep -rli 'stdio.h' * | xargs sed -i 's/stdio.h/STDIO.H/g'


find:
=====

syntax: 
find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point...] [expression]

serach the directory tree according to criterias in expression.
if expression is False, skip this file and move on finding the next file where expression is True.
expression is False if one criteria is False for AND conditions, or if all are False for OR conditions.

expression is made up of options, tests and actions. Print (full file name) is a default action

-exec command ;
    Execute command; true if 0 status is returned.  All following arguments to find are  taken
    to  be  arguments  to the command until an argument consisting of `;' is encountered.  The
    string `{}' is replaced by the current file name being processed everywhere it  occurs  in
    the arguments to the command.

shell reserved chars might be used quoted by 'c' or \c

examples:
--------
#find all files and sub directories in the current directory
find
find .
find . -print

#find all files and sub directories in any other directory
find /home/barak

#find -r files or directories by name
find . -name "text"
find . -type f -name "text.txt"
#ignore case
find . -iname "Text.txt"

#maxdepth
find ./test -maxdepth 1 -name *.php

#exclude files or folders
find ./test -not -name *.php
find ./test ! -name *.php

#combine multiple criterias: the default is AND 
find ./test ! -name "*.php" ! -name "*.txt"

#-a = AND
#If we like OR, we need to explicitly use -o
find ./test ! -name "*.php" -o -name "*.txt"

#rename multiple files
find . -type f -name 'text1' -exec mv {} {}.txt \;

#find directories only
find . -type d "barak"

#find files only
find . -type f "barak"

#find files with permissions 777
find . -type f -perm 777

#ind read only files
find . -type f -perm /u=r

#find executable files
find . -type f -perm /u=x

#change mode to multiple files
find . -type f -perm 777 -exec chmod 644 {} \;

#find an remove multiple files. using xargs, no need {}
find . -type f -name "*.txt" -exec rm -f {} \;
find . -type f -name "*.txt" | xargs rm -f

#find files by user
find /home -user barak

#ind files by group
find /home -group dev

#find files in current level only modified in the last 50 days
find . -maxdepth 1 -mtime -50

#find files in current level only accessed in the last 50 days
find . -maxdepth 1 -mtime -50

#find files modified in the last 50 minutes
find . -mmin -60

#find files modified in the last 100 days but not less than 50 days
find . -mtime -100 -mtime +50

#find files less than 10M
find . -type f -size -10M

#find files bigger than 10M
find . -type f -size +10M

#AND = -a
find -O3 . \( -name "subtest3" \) -a \( -type d \)

#what is the difference between xargs and find -exec
#using | after the find, used by the shell
#using -exec is part of the find, not the shell and is taken on every entry during the search.


bash:
=====
for f in *; do cat $f; done
