printouts on init:
==================	
armada-nand f10d0000.nand-flash: Initialize HAL based NFC in 8bit mode with DMA Disabled using BCH 8bit ECC
NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit), 1024MiB, page size: 4096, OOB size: 128

print info params:
==================
info.ecc_type: 2 // MV_NFC_ECC_BCH_1K
info.page_size: 2

print nand params:
==================
nand ecc mode : 2 //	NAND_ECC_HW,
nand ecc steps : 1
nand ecc size : 4096
nand ecc strength : 8
nand ecc layout: -1066583568


print mtd params:
==================
erase size: 262144
write size: 4096
oobsize size: 128
bitflip threshold: 8
ecc strrength : 8


mtd //mtd_info
mtd->nand (mtd -> priv) //nand_chip
mtd->nand->chip (nand -> priv) //orion_nfc_info

data buffers allocated once upon nfc_nand probing in orion_nfc_init_buff()


there is also a buffers pointer in mtd->nand sturct: 
	struct nand_buffers *buffers;


struct nand_buffers {
	uint8_t	ecccalc[NAND_MAX_OOBSIZE];
	uint8_t	ecccode[NAND_MAX_OOBSIZE];
	uint8_t databuf[NAND_MAX_PAGESIZE + NAND_MAX_OOBSIZE];
};

/**
 * struct mtd_ecc_stats - error correction stats
 *
 * @corrected:	number of corrected bits
 * @failed:	number of uncorrectable errors
 * @badblocks:	number of bad blocks in this partition
 * @bbtblocks:	number of blocks reserved for bad block tables
 */
struct mtd_ecc_stats {
	__u32 corrected;
	__u32 failed;
	__u32 badblocks;
	__u32 bbtblocks;
};

_read ---> nand_read ----> nand_do_read_ops:

chen: 
latest patch not running - eccsteps = 1, correct not returning -EBADMSG

raz:
disable hw ecc upon write ?
