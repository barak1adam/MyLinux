the error printed on panic:
===========================
UBIFS error (pid 1): ubifs_scan: corrupt empty space at LEB 3:7571
UBIFS error (pid 1): ubifs_scanned_corruption: corruption at LEB 3:7571
UBIFS error (pid 1): ubifs_scanned_corruption: first 8192 bytes from LEB 3:7571
UBIFS error (pid 1): ubifs_scan: LEB 3 scanning failed
VFS: Cannot open root device "ubi0:root" or unknown-block(0,0): error -117
Please append a correct "root=" boot option; here are the available partitions:
Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)


info printed by the kernel on boot:
====================================
armada-nand f10d0000.nand-flash: Initialize HAL based NFC in 8bit mode with DMA Disabled using BCH 8bit ECC
NAND device: Manufacturer ID: 0x2c, Chip ID: 0xd3 (Micron NAND 1GiB 3,3V 8-bit), 1024MiB, page size: 4096, OOB size: 128
Bad block table found at page 262080, version 0x01
Bad block table found at page 262016, version 0x01
4 cmdlinepart partitions found on MTD device armada-nand
Creating 4 MTD partitions on "armada-nand":
0x000000000000-0x000000800000 : "boot1"
0x000000800000-0x00001fc00000 : "ver_a_part"
0x00001fc00000-0x00003f000000 : "ver_b_part"
0x00003f000000-0x000040000000 : "internal_db"

investigation:
==============
linux mount ---> ubifs_read_master(struct ubifs_info *c)
 splits into 2 scenarios:
 
1) 
scan_for_master

2) if err is returned by scan_for_master, start ubifs_recover_master_node
chen - keep investigate later, complete functions stack


1) scan_for_master (fs/ubifs)
--> ubifs_scan (fs/ubifs) to scan a leb. This function prints all empty courruption errors and return err pointer instead of sleb.
--> it calls ubifs_start_scan (fs/ubifs) to make the actual reads
--> ubifs_leb_read (fs/ubifs)
--> ubi_read (mtd/ubi.h)
--> ubi_leb_read (mtd/ubi)
--> ubi_eba_read_leb (mtd/ubi)
--> ubi_io_read_data (mtd/ubi)
--> ubi_io_read (mtd/ubi)
--> mtd_read (mtd)
--> mtd->_read (mtd)
--> nand_read (mtd) (mtd/nand/nand_base)
--> nand_do_read_ops (mtd) ---> chip->ecc.read_page or chip->ecc.read_page_raw or chip->ecc.read_subpage

*
 * This function reads data from offset @offset of logical eraseblock @lnum and
 * stores the data at @buf. When reading from static volumes, @check specifies
 * whether the data has to be checked or not. If yes, the whole logical
 * eraseblock will be read and its CRC checksum will be checked (i.e., the CRC
 * checksum is per-eraseblock). So checking may substantially slow down the
 * read speed. The @check argument is ignored for dynamic volumes.
 *
 * In case of success, this function returns zero. In case of failure, this
 * function returns a negative error code.
 *
 * %-EBADMSG error code is returned:
 * o for both static and dynamic volumes if MTD driver has detected a data
 *   integrity problem (unrecoverable ECC checksum mismatch in case of NAND);
 * o for static volumes in case of data CRC mismatch.
 *
 * If the volume is damaged because of an interrupted update this function just
 * returns immediately with %-EBADF error code.
 */
int ubi_leb_read(struct ubi_volume_desc *desc, int lnum, char *buf, int offset,
		 int len, int check)


(mtd/nand)

nand_scan (mtd..)
nand_scan_tail (mtd..)
	set 	chip->ecc.layout
	depends on chip->ecc.mode, set :
		chip->ecc.read_page = nand_read_page_hwecc; ---> include the bugfix
		chip->ecc.read_page_raw = nand_read_page_raw; ---> NOT includeing the bugfix
		chip->ecc.read_oob = nand_read_oob_std; ---> NOT includeing the bugfix
		chip->ecc.read_subpage = nand_read_subpage; --> include the bugfix
		mtd->_read = nand_read;
		mtd->_write = nand_write;
		mtd->_read_oob = nand_read_oob;

debug:
=======
-print assignments of lower layer read functions in nand_scan_tail
-dump stack on lower layer read functions
-try printouts on the other partition
-how to add printk level on boot command (like dmesg -n7)


solutions:
==========
-what other pathches was mainlined to kernel
-max bitflips
-retrun OK instead of ERR


debug:
change pr_debug to pr_info
try to erase the corrupted area on u-boot

lease, provide all messages. UBIFS prints much more of them when
debugging is enabled. It prints them with KERN_DEBUG level, which
means they do not go to your console by default. You should use
'ignore_loglevel' boot option to make kernel print everything to the
serial console, see here:

http://www.linux-mtd.infradead.org/doc/ubifs.html#L_how_send_bugreport

But we have mtdram. You could simulate various patterns by
creating various images on you host FS. Then you may do:

dd if=my_simulated_file of=/dev/mtd0

Probably it makes sense to create an UBIFS FS first. Then
dump /deve/mtd0 to a file, and start abusing this file differently.


http://www.linux-mtd.infradead.org/faq/ubifs.html#L_how_debug
Documentation/dynamic-debug-howto.txt

Power-cut recovery testing

http://lists.infradead.org/pipermail/linux-mtd/2012-January/039303.html

Debug messages during boot process
==================================

To be able to activate debug messages during the boot process,
even before userspace and debugfs exists, use the boot parameter:
ddebug_query="QUERY"

mtd-tests
https://stackoverflow.com/questions/27744402/enable-dynamic-debug-for-multiple-files-at-boot
set the driver to protect empty space
or patch the ubifs

Some more information about our setup in case it's useful:
- ARM SoC: Zynq
- NAND controller - ARM Primecell PL353 Static Memory Controller (Zynq peripheral)
- Driver currently out-of-tree, see [1]
- NAND chip - Micron 8GB, on-die 4-bit ECC
- Kernel: 3.2.35-rt52, with vendor patches
- u-boot 2012.10, with vendor patches




ubifs_debugging_init



chen:
flow of the code, what is happening
why patch is not wroking
how to debug ubifs, how to debug from u-boot
how to simulate - nand simulator


