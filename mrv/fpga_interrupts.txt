disadvantages:
=============

reading 1 to 3 SPI devices is quite long time - unaccceptable to waste so much CPU time in int. handling.
for each int., user will have to make request-irq and to register a handler:
-- we will have to have many irqs (complicated)
-- request irq and handlers are used in kernel space, not user space. still we will have to imolement every handler...
SPI:
need to add SPI access code:
-- if on spidev - not synced with sTapi layer direct and indirect logic.
-- if a new driver - 1) changing lower driver for sTapi. 2) not synced with sTapi logic
I tried both methods successfully.
really not encouraged by spidev author and by Ori.

disabling and enabling interrupts still need to be implemented.

will have to implement 3 drivers or 3 devices, more complicated.


advantages:
-device tree is used to define HW.
can be used to tell the driver how many FPGAs we are having and how they are connected. (not so helpful. If I get an int.
from adaptor, I will go to check the adaptor and so on...)
can support changes in irq type for example (edge/level, active low/high)
can support all irqs by demand in DTS, without kernel compilation.


Kosta,

difference between driver name and "compatible" strings.

In DTS model, "compatible" property is used to probe a driver for a specific device:
====================================================================================
driver init functin is like a "constructor", giving the kernel the probe function to be invoked in case of a match
of compatible strings in DTS and driver.
init function register the driver name , probe function and its compatible strings array.
if kernel finds a match to a compatible string in the DTS, it loads (calls the probing functions with that compatible name,
usually the specific device name).

machine compatible strings:
in the code, each maching desc has an array of strings, each include "exact board model", "SoC name", "Soc family name".
kerenl compare all machine descriptions with DT, to see if any entry of a machine desc match DT compaitble.
The machine desc which has the most compatible match will be booted.
For each machine it let us add bug fixes / workarounds for a specific models we can add in DT.
we can refer to the exact model in the code:
if (of_machine_is_compatible("fsl,imx28-evk"))
	imx28_evk_init();

In Platform device model, driver name was used for probing:
===========================================================
Before DT, platform drivers / devices were used.
driver name was used to match a device. To support multiple devices in a driver, devices ID table
was used (platform_device_id *id_table)

So the driver was registered in its init funcution by calling platform_driver_register(struct platform_driver *driver)
where the driver struct was including its name or an ID table.
A specific device was registered in our board init file, calling platform_device_register(struct platform_device *pdev),
where the platform_device struct including its name.
Kernel was then doing the match between the driver and a device, 
and call the appropriate probe function with that specific device data.

With DTS, no need to register a device in the code, but to provide the information in the DTS file.

Regarding other properties in a DTS node:
when you write a driver, you know what properties you need in your probing function,
so these properties are required in DTS.


request (irq1, handler1)
request (irq2, handler2)

handler1{
	disable my_int
	handle
	call generic_handle (irq2)
	enable my_int
}
